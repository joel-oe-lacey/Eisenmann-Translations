{"version":3,"sources":["webpack:///./node_modules/@material-ui/core/esm/Link/Link.js","webpack:///./src/components/link.js","webpack:///./src/components/langInfoSelector.js","webpack:///./src/templates/site-pages.js","webpack:///./helpers.js"],"names":["props","ref","classes","className","_props$color","color","_props$component","component","onBlur","onFocus","TypographyClasses","_props$underline","underline","_props$variant","variant","other","_useIsFocusVisible","useIsFocusVisible","isFocusVisible","onBlurVisible","focusVisibleRef","_React$useState","focusVisible","setFocusVisible","handlerRef","useForkRef","Typography","root","concat","capitalize","button","event","withStyles","underlineNone","textDecoration","underlineHover","underlineAlways","position","WebkitTapHighlightColor","backgroundColor","outline","border","margin","borderRadius","padding","cursor","userSelect","verticalAlign","borderStyle","name","Wrapper","height","width","display","flexDirection","justifyContent","alignItems","overflow","FetchInfoSelector","languages","data","node","slug","title","to","key","inset","primary","query","render","Info","styled","rhythm","pageQuery","location","intl","useIntl","localizedPost","groupPagesByLocale","siteTitle","category","dangerouslySetInnerHTML","__html","html","markdown","pagesByLocale"],"mappings":"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","file":"component---src-templates-site-pages-js-e5ee207c7c3c77661fca.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nvar Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  var _useIsFocusVisible = useIsFocusVisible(),\n      isFocusVisible = _useIsFocusVisible.isFocusVisible,\n      onBlurVisible = _useIsFocusVisible.onBlurVisible,\n      focusVisibleRef = _useIsFocusVisible.ref;\n\n  var _React$useState = React.useState(false),\n      focusVisible = _React$useState[0],\n      setFocusVisible = _React$useState[1];\n\n  var handlerRef = useForkRef(ref, focusVisibleRef);\n\n  var handleBlur = function handleBlur(event) {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    className: clsx(classes.root, classes[\"underline\".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? void 0 : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);","import React from 'react';\nimport MuiLink from '@material-ui/core/Link';\nimport { Link as GatsbyLink } from 'gatsby';\n\nconst Link = React.forwardRef(function Link(props, ref) {\n  return <MuiLink component={GatsbyLink} ref={ref} {...props} />;\n});\n\nexport default Link;","import React from \"react\"\nimport {\n  graphql,\n  StaticQuery\n} from \"gatsby\"\nimport styled from 'styled-components'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Link from './link';\n\nconst Wrapper = styled(List)({\n    height: 'max-content',\n    width: '100%',\n    backgroundColor: '#333333',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    overflow: 'scroll'\n})\n\nconst FetchInfoSelector = ({ data }) => { \n  const languages = data.allMarkdownRemark.edges;\n\n  const list = () => (\n    <React.Fragment>\n        {\n            languages.map(({ node }) => {\n                const slug = node.fields.slug;\n                const title = node.frontmatter.title;\n                \n                return (\n                <Link to={slug}>\n                    <ListItem button key={title}>\n                        <ListItemText inset={true} primary={title} />\n                    </ListItem>\n                </Link>\n                )\n            })\n        }\n    </React.Fragment>\n  );\n\n  return (\n    <Wrapper>\n        {list()}\n    </Wrapper>\n  )\n}\n\nconst LangInfoSelector = () => {\n    return (\n    <StaticQuery\n      query={graphql`\n        query {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n          allMarkdownRemark(filter: {\n                  frontmatter: {\n                      category: {\n                          eq: \"Languages\"\n                      }\n                  }\n              }) {\n            edges {\n              node {\n                excerpt\n                fields {\n                  slug\n                }\n                frontmatter {\n                  title\n                  type\n                  category\n                }\n              }\n            }\n          }\n        }\n      `}\n      render={data => <FetchInfoSelector data={data} />}\n    />\n  )\n}\n\nexport default LangInfoSelector","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport styled from 'styled-components'\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport LangInfoSelector from \"../components/langInfoSelector\"\nimport {\n  useIntl\n} from \"gatsby-plugin-intl\"\nimport {\n  groupPagesByLocale\n} from '../../helpers'\n\nimport {\n  rhythm\n} from \"../utils/typography\"\n\nconst Info = styled.section`\n    height: 100%;\n    width: 100%;\n    padding: ${rhythm(2.5)};\n`;\n\nconst BlogIndex = ({ data, location }) => {\n  const intl = useIntl();\n  const posts = groupPagesByLocale(data.allMarkdownRemark.edges)\n  const localizedPost = posts[intl.locale];\n\n  const siteTitle = localizedPost.frontmatter.title\n  const category = localizedPost.frontmatter.category\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      {category === \"Languages\" && <LangInfoSelector />}\n      <Info dangerouslySetInnerHTML={{ __html: localizedPost.html }} />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query SitePagesBySlug($groupingID: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(filter: {frontmatter: {groupingID: {eq: $groupingID}}}) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            category\n            locale\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n","export const groupPagesByLocale = markdown => {\n  return markdown.reduce((pagesByLocale, {\n    node\n  }) => {\n    const locale = node.frontmatter.locale;\n    pagesByLocale[locale] = node;\n\n    return pagesByLocale;\n  }, {})\n}\n\n// const trimPath = str => {\n//   const lastDirectoryIndex = str.lastIndexOf('/') + 1;\n//   const trimCount = -(str.length - lastDirectoryIndex);\n\n//   return str.slice(0, trimCount)\n// }"],"sourceRoot":""}