{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/templates/blog-post.js"],"names":["data","useStaticQuery","author","social","style","display","marginBottom","rhythm","fixed","alt","marginRight","minWidth","borderRadius","imgStyle","href","twitter","pageContext","location","post","siteTitle","previous","next","title","description","excerpt","marginTop","scale","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","rel","pageQuery"],"mappings":"6FAAA,sEAqEA,IAxDY,WACV,IAAMA,EAAOC,yBAAb,cADgB,EAwBWD,OAxBX,aAwBRE,EAxBQ,SAwBAC,EAxBA,SAyBhB,OACE,yBACEC,MAAO,CACLC,QADK,OAELC,aAAcC,YAAO,OAGvB,uBACEC,MAAOR,yBADT,MAEES,IAAKP,EAFP,KAGEE,MAAO,CACLM,YAAaH,YAAO,IACpBD,aAFK,EAGLK,SAHK,GAILC,aAAa,QAEfC,SAAU,CACRD,aAAa,SAGjB,yCACa,gCAASV,EADtB,UAC6CA,EAD7C,YAGE,uBAAGY,KAAI,uBAAyBX,EAAOY,SAvB7C,wC,kCCtCF,sIAgFA,UAxEyB,SAAC,GAAqC,IAAnCf,EAAkC,EAAlCA,KAAMgB,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAOlB,EAAb,eACMmB,EAAYnB,oBAAlB,MACQoB,EAAmBJ,EAHiC,SAG1CK,EAASL,EAHiC,KAK5D,OACE,uBAAQC,SAAR,EAA4BK,MAAOH,GACjC,uBACEG,MAAOJ,cADT,MAEEK,YAAaL,2BAAgCA,EAAKM,UAEpD,iCACE,gCACE,wBACEpB,MAAO,CACLqB,UAAWlB,YADN,GAELD,aAAc,IAGfY,cAPL,OASE,uBACEd,MAAK,iBACAsB,aAAM,IADN,CAEHrB,QAFG,QAGHC,aAAcC,YAAO,MAGtBW,cAjBP,OAoBE,6BAASS,wBAAyB,CAAEC,OAAQV,EAAKW,QACjD,wBACEzB,MAAO,CACLE,aAAcC,YAAO,MAGzB,gCACE,sBAhCN,QAoCE,6BACE,wBACEH,MAAO,CACLC,QADK,OAELyB,SAFK,OAGLC,eAHK,gBAILC,UAJK,OAKLC,QAAS,IAGX,4BACGb,GACC,0BAAMc,GAAId,SAAV,KAAgCe,IAAI,QAApC,KACKf,cAZX,QAgBE,4BACGC,GACC,0BAAMa,GAAIb,SAAV,KAA4Bc,IAAI,QAC7Bd,cADH,MAxDZ,WAqEK,IAAMe,EAAN","file":"component---src-templates-blog-post-js-54a4f1c97916b43ea524.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nimport { rhythm } from \"../utils/typography\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author.name}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p>\n        Written by <strong>{author.name}</strong> {author.summary}\n        {` `}\n        <a href={`https://twitter.com/${social.twitter}`}>\n          You should follow him on Twitter\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const { previous, next } = pageContext\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article>\n        <header>\n          <h1\n            style={{\n              marginTop: rhythm(1),\n              marginBottom: 0,\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: `block`,\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.frontmatter.date}\n          </p>\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}